{"version":3,"sources":["API/useFetchCharacters.ts","store/constants.ts","store/actions.ts","store/selectors.ts","components/buttons/TextButton/TextButton.tsx","components/buttons/IconButton/IconButton.tsx","components/card/Card.tsx","components/cardList/CardList.tsx","components/loader/Loader.tsx","App.tsx","store/reducer.ts","store/store.ts","index.tsx"],"names":["useFetchCharacters","useState","isLoading","setIsLoading","isError","setIsError","getCharacters","a","axios","get","response","data","String","SET_CARD_LIST","REMOVE_CARD","LIKE_CARD","FILTER_LIKED_CARD","setCardListAction","cardList","dispatch","type","payload","filterCardAction","getCardsSelector","state","characters","getFilteredCardsSelector","filter","item","isLikedFilter","isLike","getIsLikedFilter","TextButton","props","className","children","IconButton","Card","character","img","nickname","name","occupation","useDispatch","src","alt","onClick","id","char_id","CardList","onReload","useSelector","filteredCharacters","length","TransitionGroup","map","CSSTransition","timeout","classNames","Loader","App","fetchData","useEffect","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3997820a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { ICharacter } from '../store/interfaces';\r\n\r\ninterface IUseFetchCharacters {\r\n  getCharacters: () => Promise<ICharacter[] | undefined>;\r\n  isLoading: boolean;\r\n  isError: string;\r\n}\r\n\r\nconst useFetchCharacters = (): IUseFetchCharacters => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState('');\r\n\r\n  const getCharacters = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get<ICharacter[]>(\r\n        'https://www.breakingbadapi.com/api/characters?limit=20'\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      setIsError(String(error));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    getCharacters,\r\n    isLoading,\r\n    isError,\r\n  };\r\n};\r\n\r\nexport default useFetchCharacters;\r\n","export const SET_CARD_LIST = 'SET_CARD_LIST';\r\nexport const REMOVE_CARD = 'REMOVE_CARD';\r\nexport const LIKE_CARD = 'LIKE_CARD';\r\nexport const FILTER_LIKED_CARD = 'FILTER_LIKED_CARD';\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  REMOVE_CARD,\r\n  SET_CARD_LIST,\r\n  LIKE_CARD,\r\n  FILTER_LIKED_CARD,\r\n} from './constants';\r\nimport { ICharacter } from './interfaces';\r\n\r\nexport const setCardListAction =\r\n  (cardList: ICharacter[]) => (dispatch: Dispatch) => {\r\n    dispatch({ type: SET_CARD_LIST, payload: cardList });\r\n  };\r\n\r\nexport const removeCardAction =\r\n  (id: ICharacter['char_id']) => (dispatch: Dispatch) => {\r\n    dispatch({ type: REMOVE_CARD, payload: id });\r\n  };\r\n\r\nexport const likeCardAction =\r\n  (id: ICharacter['char_id']) => (dispatch: Dispatch) => {\r\n    dispatch({ type: LIKE_CARD, payload: id });\r\n  };\r\n\r\nexport const filterCardAction = (dispatch: Dispatch) => {\r\n  dispatch({ type: FILTER_LIKED_CARD });\r\n};\r\n","import { IState } from './interfaces';\r\n\r\nexport const getCardsSelector = (state: IState) => state.characters;\r\n\r\nexport const getFilteredCardsSelector = (state: IState) =>\r\n  state.characters.filter((item) => (state.isLikedFilter ? item.isLike : true));\r\n\r\nexport const getIsLikedFilter = (state: IState) => state.isLikedFilter;\r\n","import { ButtonHTMLAttributes, FC } from 'react';\r\nimport './TextButton.css'\r\n\r\ninterface IProps extends ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nconst TextButton: FC<IProps> = (props) => {\r\n  return (\r\n    <button {...props} className={`text-btn ${props.className || ''}`}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default TextButton;\r\n","import { ButtonHTMLAttributes, FC } from 'react';\r\nimport './IconButton.css'\r\n\r\ninterface IProps extends ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nconst IconButton: FC<IProps> = (props) => {\r\n  return (\r\n    <button {...props} className={`icon-btn ${props.className || ''}`}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default IconButton;\r\n","import './Card.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport IconButton from '../buttons/IconButton/IconButton';\r\nimport { removeCardAction } from '../../store/actions';\r\nimport { likeCardAction } from '../../store/actions';\r\nimport { FC } from 'react';\r\nimport { ICharacter } from '../../store/interfaces';\r\n\r\ninterface IProps extends ICharacter {}\r\n\r\nconst Card: FC<IProps> = (character) => {\r\n  const { isLike, img, nickname, name, occupation } = character;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemoveCard = () => {\r\n    dispatch(removeCardAction(character.char_id));\r\n  };\r\n\r\n  const handleLikeCard = () => {\r\n    dispatch(likeCardAction(character.char_id));\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      <img className='card__img' src={img} alt={nickname} />\r\n      <div className='card__info'>\r\n        <h2>{name}</h2>\r\n        <p className='card__nickName'>{nickname}</p>\r\n        <p>{occupation}</p>\r\n      </div>\r\n      <IconButton className='btn-remove' onClick={handleRemoveCard}>\r\n        &#10006;\r\n      </IconButton>\r\n      <IconButton\r\n        className={`btn-like ${isLike ? 'active' : ''}`}\r\n        onClick={handleLikeCard}\r\n      >\r\n        ‚ù§\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { filterCardAction } from '../../store/actions';\r\nimport {\r\n  getCardsSelector,\r\n  getFilteredCardsSelector,\r\n  getIsLikedFilter,\r\n} from '../../store/selectors';\r\nimport TextButton from '../buttons/TextButton/TextButton';\r\nimport Card from '../card/Card';\r\nimport './CardList.css';\r\n\r\ninterface IProps {\r\n  isError: string;\r\n  onReload: () => void;\r\n}\r\n\r\nconst CardList: FC<IProps> = ({ isError, onReload }) => {\r\n  const characters = useSelector(getCardsSelector);\r\n  const filteredCharacters = useSelector(getFilteredCardsSelector);\r\n\r\n  const isLikedFilter = useSelector(getIsLikedFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChangeFilter = () => {\r\n    dispatch(filterCardAction);\r\n  };\r\n  if (isError) {\r\n    return (\r\n      <div className='error-wrapper'>\r\n        <h2>Something went wrong...</h2>\r\n        <p>{isError}</p>\r\n        <TextButton onClick={onReload}>Reload</TextButton>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className='card-list-wrapper'>\r\n      {characters.length ? (\r\n        <TextButton onClick={handleChangeFilter}>\r\n          {isLikedFilter ? 'show all' : 'show liked'}\r\n        </TextButton>\r\n      ) : (\r\n        <TextButton onClick={onReload}>Reload</TextButton>\r\n      )}\r\n\r\n      {filteredCharacters.length ? (\r\n        <TransitionGroup className='card-list'>\r\n          {filteredCharacters.map((character) => (\r\n            <CSSTransition\r\n              key={character.char_id}\r\n              timeout={500}\r\n              classNames='cards'\r\n            >\r\n              <Card {...character} />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      ) : (\r\n        !!characters.length && (\r\n          <div className='no-liked-message'>Sorry, no liked cards :(</div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className='loader'></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useFetchCharacters from './API/useFetchCharacters';\nimport './App.css';\nimport CardList from './components/cardList/CardList';\nimport Loader from './components/loader/Loader';\nimport { setCardListAction } from './store/actions';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { getCharacters, isLoading, isError } = useFetchCharacters();\n\n  const fetchData = async () => {\n    const data = await getCharacters();\n    dispatch(setCardListAction(data || []));\n  };\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className='app'>\n      <h1 className='app__title'>The Breaking Bad</h1>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <CardList onReload={fetchData} isError={isError} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import {\r\n  REMOVE_CARD,\r\n  SET_CARD_LIST,\r\n  LIKE_CARD,\r\n  FILTER_LIKED_CARD,\r\n} from './constants';\r\nimport { IAction, ICharacter, IState } from './interfaces';\r\n\r\nconst initialState: IState = {\r\n  characters: [],\r\n  isLikedFilter: false,\r\n};\r\n\r\nexport const cardReducer = (state = initialState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case SET_CARD_LIST:\r\n      return {\r\n        ...state,\r\n        characters: action.payload.map((item: ICharacter) => ({\r\n          ...item,\r\n          isLike: false,\r\n        })),\r\n      };\r\n    case REMOVE_CARD:\r\n      return {\r\n        ...state,\r\n        characters: state.characters.filter(\r\n          (item: ICharacter) => item.char_id !== action.payload\r\n        ),\r\n      };\r\n    case LIKE_CARD:\r\n      return {\r\n        ...state,\r\n        characters: state.characters.map((item: ICharacter) => ({\r\n          ...item,\r\n          isLike: item.char_id === action.payload ? !item.isLike : item.isLike,\r\n        })),\r\n      };\r\n    case FILTER_LIKED_CARD:\r\n      return {\r\n        ...state,\r\n        isLikedFilter: !state.isLikedFilter,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { cardReducer } from './reducer';\r\n\r\nexport const store = createStore(cardReducer, applyMiddleware(thunk));\r\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}